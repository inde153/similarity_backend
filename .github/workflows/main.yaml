name: similarity

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build:
    # build가 시작되려면 test를 완료해야함
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code #actions/checkout@v2 액션을 사용하여 리포지토리의 코드를 체크아웃
        uses: actions/checkout@v2
      - name: Set up Docker Buildx # Docker Buildx를 설정하여 다중 플랫폼 빌드 기능을 사용
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry # GitHub Container Registry에 로그인합니다. GHCR_PAT는 Personal Access Token으로, GitHub Secrets에 저장되어 있어야 합니다.
        run: echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker tag my_project_app:latest ghcr.io/${{ github.repository }}/my_project_app:latest
          docker tag my_project_nginx:latest ghcr.io/${{ github.repository }}/my_project_nginx:latest
          docker push ghcr.io/${{ github.repository }}/my_project_app:latest
          docker push ghcr.io/${{ github.repository }}/my_project_nginx:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code #actions/checkout@v2 액션을 사용하여 리포지토리의 코드를 체크아웃합니다.
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Pull and run Docker containers
        run: |
          docker-compose -f docker-compose.yml pull
          docker-compose -f docker-compose.yml up -d

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.ref, 'master')
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_URI }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          key_type: ed25519
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ghcr.io/${{ github.repository }}/my_project_app:latest
            sudo docker pull ghcr.io/${{ github.repository }}/my_project_nginx:latest
            sudo docker run -d -p 8082:8082 ghcr.io/${{ github.repository }}/my_project_app:latest
            sudo docker run -d -p 80:80 ghcr.io/${{ github.repository }}/my_project_nginx:latest
            sudo docker image prune -f
